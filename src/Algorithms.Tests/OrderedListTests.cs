using Algorithms.DataStructure;
using Algorithms.LargestSum;
using Microsoft.VisualStudio.TestPlatform.ObjectModel.DataCollection;
using NUnit.Framework.Internal;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Algorithms.Tests
{
    public class OrderedListTests
    {
        [TestCase(9, 0, 8)]
        [TestCase(9, 0)]
        [TestCase(9, 1, 10)]
        [TestCase(9, 9, 19, 18, 17, 16, 15, 14, 13, 11, 10)]
        [TestCase(20, 0, 19, 18, 17, 16, 15, 14, 13, 11, 10)]
        [TestCase(12, 7, 19, 18, 17, 16, 15, 14, 13, 11, 10, 9)]
        [TestCase(12, 1, 13, 11, 10, 9)]
        [TestCase(12, 18, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 11, 10, 9)]
        [TestCase(13, 17, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 12, 11, 10, 9)]
        [TestCase(28, 2, 30, 29, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 12, 11, 10, 9, 8)]
        [TestCase(925, 3, 971, 966, 926, 923, 913, 908, 905, 893, 866, 858, 852, 838, 816, 811, 810, 807, 800, 797, 795, 787, 776, 750, 739, 736, 724, 717, 707, 701, 694, 669, 654, 648, 648, 614, 602, 599, 578, 578, 573, 559, 551, 548, 537, 525, 515, 514, 512, 499, 493, 483, 480, 471, 466, 451, 440, 433, 425, 424, 421, 401, 396, 394, 391, 380, 378, 376, 375, 374, 343, 333, 332, 310, 277, 276, 260, 254, 229, 225, 215, 215, 212, 210, 189, 188, 186, 174, 164, 161, 158, 152, 141, 135, 120, 117, 112, 63, 62, 57, 30, 2)]
        [TestCase(67, 95, 971, 966, 926, 923, 913, 908, 905, 893, 866, 858, 852, 838, 816, 811, 810, 807, 800, 797, 795, 787, 776, 750, 739, 736, 724, 717, 707, 701, 694, 669, 654, 648, 648, 614, 602, 599, 578, 578, 573, 559, 551, 548, 537, 525, 515, 514, 512, 499, 493, 483, 480, 471, 466, 451, 440, 433, 425, 424, 421, 401, 396, 394, 391, 380, 378, 376, 375, 374, 343, 333, 332, 310, 277, 276, 260, 254, 229, 225, 215, 215, 212, 210, 189, 188, 186, 174, 164, 161, 158, 152, 141, 135, 120, 117, 112, 63, 62, 57, 30, 2)]
        [TestCase(973, 0, 971, 966, 926, 923, 913, 908, 905, 893, 866, 858, 852, 838, 816, 811, 810, 807, 800, 797, 795, 787, 776, 750, 739, 736, 724, 717, 707, 701, 694, 669, 654, 648, 648, 614, 602, 599, 578, 578, 573, 559, 551, 548, 537, 525, 515, 514, 512, 499, 493, 483, 480, 471, 466, 451, 440, 433, 425, 424, 421, 401, 396, 394, 391, 380, 378, 376, 375, 374, 343, 333, 332, 310, 277, 276, 260, 254, 229, 225, 215, 215, 212, 210, 189, 188, 186, 174, 164, 161, 158, 152, 141, 135, 120, 117, 112, 63, 62, 57, 30, 2)]
        [TestCase(1, 100, 971, 966, 926, 923, 913, 908, 905, 893, 866, 858, 852, 838, 816, 811, 810, 807, 800, 797, 795, 787, 776, 750, 739, 736, 724, 717, 707, 701, 694, 669, 654, 648, 648, 614, 602, 599, 578, 578, 573, 559, 551, 548, 537, 525, 515, 514, 512, 499, 493, 483, 480, 471, 466, 451, 440, 433, 425, 424, 421, 401, 396, 394, 391, 380, 378, 376, 375, 374, 343, 333, 332, 310, 277, 276, 260, 254, 229, 225, 215, 215, 212, 210, 189, 188, 186, 174, 164, 161, 158, 152, 141, 135, 120, 117, 112, 63, 62, 57, 30, 2)]
        [TestCase(523, 48, 996, 984, 980, 963, 958, 947, 941, 940, 937, 919, 912, 911, 896, 894, 865, 863, 857, 851, 849, 819, 819, 814, 799, 789, 780, 771, 767, 765, 763, 739, 733, 733, 726, 695, 689, 667, 647, 627, 619, 613, 598, 586, 583, 551, 549, 530, 530, 528, 521, 520, 519, 504, 473, 461, 451, 425, 414, 389, 385, 384, 381, 381, 366, 354, 344, 342, 332, 319, 318, 316, 276, 262, 256, 244, 233, 200, 197, 182, 171, 165, 165, 151, 140, 136, 129, 126, 121, 110, 102, 99, 96, 93, 54, 37, 34, 21, 19, 12, 9, 4)]
        public void FindIndex(int value, int expectedPosition, params int[] array) {

            List<MatrixPosition> list = array.Select(a => new MatrixPosition(1,2,a)).ToList();
            int expectedLentgh = list.Count + 1;
            int position = 0;

            position = OrderedListTest.FindPositionTest(new MatrixPosition(0,1, value), list);
            MatrixPosition matrixPosition = new(1, 2, value);
            list.Insert(position, matrixPosition);
            Assert.Multiple(() =>
            {
                Assert.That(list, Has.Count.EqualTo(expectedLentgh));
                Assert.That(list[position], Is.EqualTo(matrixPosition));
                Assert.That(position, Is.EqualTo(expectedPosition));
            });
        }
    }

    internal class OrderedListTest:OrderedList<MatrixPosition>
    {

        public static int FindPositionTest(MatrixPosition newElement, IList<MatrixPosition> list) {

            return FindPosition(newElement, list);
        }


    }
}
